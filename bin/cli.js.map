{"version":3,"sources":["cli.ts"],"names":[],"mappings":"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","file":"cli.js","sourceRoot":"","sourcesContent":["#!/usr/bin/env node\nimport {program} from 'commander'\nimport fs from 'fs'\nimport path from 'path'\nimport puppeteer from 'puppeteer'\nimport chalk from 'chalk'\n\ndeclare global {\n  interface Window {\n    tefcha: any;\n  }\n}\n\nconst main = () => {\n  program\n    .usage('[options] [file]')\n    .description('convert psedo code to flowchart. if input file is not given, use stdin instead.')\n    .option('-o --output-file <file>', 'output file name (if not given, use stdout).')\n\n  program.parse(process.argv);\n  const inputFile = program.args[0];\n  const outputFile = program.outputFile;\n\n  if (inputFile && !fs.existsSync(inputFile)) {\n    console.error(chalk.red(`Cannot find input file \"${inputFile}\"`));\n    return;\n  }\n\n  const src: string = fs.readFileSync(inputFile || 0).toString();\n\n  const launch = async () => {\n    const browser = await puppeteer.launch({\n      // headless: false,\n    });\n    const page = await browser.newPage();\n    const htmlFile = path.join(__dirname, 'index.html');\n    page.setViewport({width: 500, height: 500});\n    await page.goto(`file://${htmlFile}`);\n    await page.evaluate(`document.body.style.background = '${'white'}'`);\n\n    const result = await page.$eval('#container', (container, src, _x2, _x3) => {\n      container.textContent = src;\n      try {\n        window.tefcha.initialize();\n      } catch (error) {\n        return {status: 'error', error, message: error.message};\n      }\n    }, src, null, null);\n\n    if (result && result.status === 'error') {\n      console.error(chalk.red(result.message))\n    }\n\n    const svg = await page.$eval('#container', container => container.innerHTML);\n    if (outputFile) {\n      fs.writeFileSync(outputFile, svg);\n    } else {\n      console.log(svg);\n    }\n    await browser.close();\n  };\n\n  launch();\n}\n\nmain();\n"]}